server {
    listen 80;
    listen [::]:80;
    server_name mysrv.mydom.zz;

    # enforce https
    return 301 https://$server_name:443$request_uri;
}


server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name mysrv.mydom.zz;

    ssl_certificate        /etc/pki/tls/certs/mysrv.mydom.zz.crt;
    ssl_certificate_key    /etc/pki/tls/private/mysrv.mydom.zz.key;
    ssl_protocols          TLSv1.3 TLSv1.2;
    ssl_ciphers            EECDH+AESGCM:EDH+AESGCM;

    #root         /usr/share/nginx/html;
    root  /var/www/mysrv.mydom.zz;

    # own logging
    error_log   /var/log/nginx/mysrv.mydom.zz-error.log;
    access_log  /var/log/nginx/mysrv.mydom.zz-access.log  main;


    # open access
    location / {
    }

    # protected resource
    location /hello/ {
        error_page 401 = @error401;	# Specific login page to use
        auth_request /auth;		# The sub-request to use
        auth_request_set $username $upstream_http_x_username;	# Make the sub request data available
        auth_request_set $sid $upstream_http_x_session;	# send what is needed
       
        #proxy_pass http://sample.com:8080/hello;	# actual location of protected data
        proxy_set_header X-Forwarded-Host $host;	# Custom headers with authentication related data
        proxy_set_header X-Remote-User $username;
        proxy_set_header X-Remote-SID $sid;
    }

    # If the user is not logged in, redirect them to login URL.
    location @error401 {
        return 302 https://mysrv.mydom.zz/auth_services/auth_saml/sso?url=https://$http_host$request_uri;
    }         

    # The auth_request location to trigger SAML authentication of this SP.
    location = /auth {
        internal;
        proxy_pass http://127.0.0.1:5000/auth_services/auth_saml/auth_check;	# authentication server
        #proxy_pass http://127.0.0.1:5000;			# authentication server
       
        #proxy_pass_request_body off;				# no data is being transferred...
        #proxy_set_header Content-Length '0';
        #proxy_set_header Content-Length "";
        proxy_set_header X-Origin-URI $request_uri;
        proxy_set_header Host $host;				# Custom headers with authentication related data
        #proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded $request_uri;
        proxy_set_header X-My-Real-IP $remote_addr;		# Additional parameters to send to login page
        proxy_set_header X-My-Real-Port $remote_port;
        proxy_set_header X-My-Server-Port $server_port;

        # forward cookie if we've got one
        #if ($http_cookie ~* "shopware_sso_token=([^;]+)(?:;|$)") {
        #    set $token "$1";
        #}
        #proxy_set_header X-SHOPWARE-SSO-Token $token;
    }

    # authentication services of this SP 
    location /auth_services/ {
        proxy_pass http://127.0.0.1:5000;			# authentication server
        #proxy_pass_request_body off;				# no data is being transferred...
        #proxy_set_header Content-Length '0';
        proxy_set_header Host $host;				# Custom headers with authentication related data
        proxy_set_header X-Origin-URI $request_uri;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded $request_uri;
        proxy_set_header X-My-Real-IP $remote_addr;		# Additional parameters to send to login page
        proxy_set_header X-My-Real-Port $remote_port;
        proxy_set_header X-My-Server-Port $server_port;
    }

    # open access to SAML metadata of this SP
    # -> May be needed if IDP wants to get metadata of SP via URL.
    location /auth_services/auth_saml/metadata {
        proxy_pass http://127.0.0.1:5000;			# Where the login happens
        proxy_set_header X-My-Real-IP $remote_addr;		# Additional parameters to send to login page
        proxy_set_header X-My-Real-Port $remote_port;
        proxy_set_header X-My-Server-Port $server_port;
    }
}
